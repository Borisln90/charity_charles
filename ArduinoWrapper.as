/*    Flash - Arduino Pedagogical Wrapper   version 1.0 : 06-02-2012   Dannie Korsgaard   Code modified from original work by Kasper Kamperman - Art & Technology - Saxion      This class is used to hide the setup and initialization code away from the students.   */package  {		import net.eriksjodin.arduino.Arduino;	import net.eriksjodin.arduino.ArduinoWithServo;	import net.eriksjodin.arduino.events.ArduinoEvent;	import net.eriksjodin.arduino.events.ArduinoSysExEvent;		import flash.utils.Timer;	import flash.events.*;		public class ArduinoWrapper {		var _defaultPinConfig:Array;		var _isMega:Boolean;		var _refreshTimer:Timer;//variable for timer object		var _a:ArduinoWithServo;// variable for Arduino object		public function ArduinoWrapper(defaultPinConfig:Array = null, ip:String = "127.0.0.1", port:int = 5331, isMega:Boolean = false) {						_a = new ArduinoWithServo(ip,port);// connect to a serial proxy on port 5331;			_a.addEventListener(Event.CONNECT,onSocketConnect);// listen for connection 			_a.addEventListener(IOErrorEvent.IO_ERROR,errorHandler);// listen for connection 			_a.addEventListener(ArduinoEvent.FIRMWARE_VERSION, onReceiveFirmwareVersion);// listen for firmware (sent on startup)						_isMega = isMega;						if(defaultPinConfig == null) {				_defaultPinConfig = new Array(					null,		// Pin 0   null (is RX)					null,		// Pin 1   null (is TX)					'digitalIn',  // Pin 2   digitalIn or digitalOut 					'digitalIn',  // Pin 3   pwmOut or digitalIn or digitalOut 					'digitalIn',  // Pin 4   digitalIn or digitalOut  					'digitalIn',  // Pin 5   pwmOut or digitalIn or digitalOut 					'digitalIn',  // Pin 6   pwmOut or digitalIn or digitalOut 					'digitalIn',  // Pin 7   digitalIn or digitalOut  					'digitalIn',  // Pin 8   digitalIn or digitalOut  					'digitalIn',  // Pin 9   pwmOut or digitalIn or digitalOut or servo 					'digitalIn',  // Pin 10  pwmOut or digitalIn or digitalOut or servo					'digitalIn',  // Pin 11  pwmOut or digitalIn or digitalOut 					'digitalIn',  // Pin 12  digitalIn or digitalOut 					'digitalOut'  // Pin 13  digitalIn or digitalOut ( led connected )				);			}		}				// == SETUP AND INITIALIZE CONNECTION ( don't modify ) ==================================		// triggered when there is an IO Error		function errorHandler(errorEvent:IOErrorEvent):void		{			trace("- "+errorEvent.text);			trace("- Did you start the Serproxy program ?");		}		// triggered when a serial socket connection has been established		function onSocketConnect(e:Object):void		{			trace("- Connection with Serproxy established. Wait one moment.");			// request the firmware version			_a.requestFirmwareVersion();		}		function onReceiveFirmwareVersion(e:ArduinoEvent):void		{			trace("- Connection with Arduino - Firmata version: " + String(e.value));			trace("- Set default pin configuration.");			// set Pinmodes by the default array. 			for (var i:int = 2; i<_defaultPinConfig.length; i++)			{// set digital output pins				if (_defaultPinConfig[i] == "digitalOut")				{					_a.setPinMode(i, Arduino.OUTPUT);				}// set digital input pins				if (_defaultPinConfig[i] == "digitalIn")				{					_a.setPinMode(i, Arduino.INPUT);				}// set pwm output pins				if (_defaultPinConfig[i] == "pwmOut")				{					_a.setPinMode(i, Arduino.PWM);				}// set servo output pins				if (_defaultPinConfig[i] == "servo")				{					_a.setupServo(i, 0);					// write set start position to 0 otherwise it turns directly to 90 degrees.					_a.writeAnalogPin(i, 0);				}			}			if (_isMega == true)			{// set digitalpins on the mega as output				// you can modify this or the default array to use inputs on the Mega.				for (i = 22; i<53; i++)				{					_a.setPinMode(i, Arduino.OUTPUT);				}			}			// you have to turn on reporting for every ANALOG pin individualy. 			// 6 analog inputs on the normal Arduino, 16 analog inputs on the Mega			var maxAnaloginputs:int;			if (_isMega)			{				maxAnaloginputs = 16;			}			else			{				maxAnaloginputs = 6;			}			for (var j:int = 0; j<maxAnaloginputs; j++)			{				_a.setAnalogPinReporting(j, Arduino.ON);			}			// for digital pins its only one setting			_a.enableDigitalPinReporting();		}				// ====================================				function onTick(timer:TimerEvent) {			//_delegate.updateProgram(_a);		}				// GETTERS				public function getFirmwareVersion (): int{			return _a.getFirmwareVersion();		}				public function getAnalogData (pin:int): int{			return _a.getAnalogData(pin);		}				public function getDigitalData (pin:int): int{			return _a.getDigitalData(pin);		}				public function setAnalogPinReporting (pin:int, mode:int):void{			_a.setAnalogPinReporting(pin, mode);		}			public function enableDigitalPinReporting ():void{			_a.enableDigitalPinReporting();		}				public function disableDigitalPinReporting ():void{			_a.disableDigitalPinReporting();		}				public function setPinMode (pin:Number, mode:Number):void{			_a.setPinMode(pin, mode);		}				//FIRMATA2.0 change: have to send a PORT-specific message		public function writeDigitalPin (pin:int, mode:int):void{			_a.writeDigitalPin(pin, mode);		}				public function writeDigitalPins (mask:Number):void{			_a.writeDigitalPins(mask);		}				public function writeAnalogPin (pin:Number, value:Number):void{			_a.writeAnalogPin(pin, value);		}				public function requestFirmwareVersion ():void{			_a.requestFirmwareVersion();		}				//FIRMATA2.0: SYSEX message to get version and name		public function requestFirmwareVersionAndName():void{						_a.requestFirmwareVersionAndName();		}		public function resetBoard ():void{			_a.resetBoard();		}			}	}